version: 2.1

jobs:
  policy-validation:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      
      - run:
          name: Install Dependencies
          command: |
            # Install OPA
            curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
            chmod +x opa
            sudo mv opa /usr/local/bin/
            
            # Install jq for JSON processing
            sudo apt-get update
            sudo apt-get install -y jq
      
      - run:
          name: Test OPA Policies
          command: |
            echo "Running OPA policy tests..."
            if [ -d "tests/" ]; then
              opa test policies/ tests/
            else
              echo "No tests directory found, skipping policy tests"
            fi
            echo "Policy tests passed!"
      
      - run:
          name: Validate Terraform Configuration
          command: |
            echo "Validating Terraform resources against policies..."
            
            # Create JSON representation of our violating S3 bucket
            cat > terraform-resources.json \<< 'JSON'
            [
              {
                "resource_type": "aws_s3_bucket",
                "resource_name": "policy_violation_bucket",
                "bucket": "circleci-lab-violation-bucket-12345"
              },
              {
                "resource_type": "aws_s3_bucket_acl",
                "resource_name": "policy_violation_bucket_acl",
                "bucket": "circleci-lab-violation-bucket-12345",
                "acl": "public-read"
              }
            ]
            JSON
            
            # Validate each resource and track violations
            TOTAL_VIOLATIONS=0
            FOUND_VIOLATIONS=false
            
            jq -c '.[]' terraform-resources.json | while read resource; do
              echo "Validating resource: $(echo "$resource" | jq -r '.resource_name')"
              
              VIOLATIONS=$(echo "$resource" | opa eval -d policies/ -i - "data.aws.s3.security.deny[x]" --format json)
              WARNINGS=$(echo "$resource" | opa eval -d policies/ -i - "data.aws.s3.security.warn[x]" --format json)
              
              # Check if violations exist
              if echo "$VIOLATIONS" | jq -e '.result | length > 0' > /dev/null 2>&1; then
                echo "❌ POLICY VIOLATIONS FOUND:"
                echo "$VIOLATIONS" | jq '.result'
                echo "VIOLATIONS_FOUND=true" >> /tmp/violations_status
              elif [ "$VIOLATIONS" != "" ]; then
                echo "✅ No violations found for this resource"
              fi
              
              # Check if warnings exist
              if echo "$WARNINGS" | jq -e '.result | length > 0' > /dev/null 2>&1; then
                echo "⚠️  POLICY WARNINGS:"
                echo "$WARNINGS" | jq '.result'
              fi
            done
            
            # Check if any violations were found
            if [ -f /tmp/violations_status ] && grep -q "VIOLATIONS_FOUND=true" /tmp/violations_status; then
              echo "Found policy violations in Terraform configuration"
              echo "❌ Build failed due to policy violations - this is expected!"
              exit 1
            else
              echo "✅ No policy violations found"
            fi

  deploy-compliant-infrastructure:
    docker:
      - image: cimg/base:stable
    environment:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - checkout
      
      - run:
          name: Install AWS CLI and Terraform
          command: |
            # Install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            # Install Terraform
            wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
            unzip terraform_1.6.0_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
      
      - run:
          name: Create and Deploy Compliant Infrastructure
          command: |
            export AWS_ROLE_ARN="arn:aws:iam::645343160353:role/CircleCILabRole"
            export AWS_WEB_IDENTITY_TOKEN_FILE="/tmp/web-identity-token"
            echo $CIRCLE_OIDC_TOKEN > $AWS_WEB_IDENTITY_TOKEN_FILE
            
            # Create terraform directory if it doesn't exist
            mkdir -p terraform
            cd terraform/
            
            # Create compliant version
            cat > main-compliant.tf \<< 'TERRAFORM'
            provider "aws" {
              region = var.aws_region
            }
            
            variable "aws_region" {
              description = "AWS region"
              type        = string
              default     = "us-east-1"
            }
            
            resource "aws_s3_bucket" "compliant_bucket" {
              bucket = "circleci-lab-compliant-${random_string.suffix.result}"
            }
            
            resource "aws_s3_bucket_server_side_encryption_configuration" "compliant_encryption" {
              bucket = aws_s3_bucket.compliant_bucket.id
            
              rule {
                apply_server_side_encryption_by_default {
                  sse_algorithm = "AES256"
                }
              }
            }
            
            resource "aws_s3_bucket_public_access_block" "compliant_pab" {
              bucket = aws_s3_bucket.compliant_bucket.id
              block_public_acls       = true
              block_public_policy     = true
              ignore_public_acls      = true
              restrict_public_buckets = true
            }
            
            resource "aws_s3_bucket_versioning" "compliant_versioning" {
              bucket = aws_s3_bucket.compliant_bucket.id
              versioning_configuration {
                status = "Enabled"
              }
            }
            
            resource "random_string" "suffix" {
              length  = 8
              special = false
              upper   = false
            }
            
            output "bucket_name" {
              value = aws_s3_bucket.compliant_bucket.bucket
            }
            TERRAFORM
            
            echo "Initializing Terraform..."
            terraform init
            
            echo "Planning compliant deployment..."
            terraform plan -out=tfplan
            
            echo "Deploying compliant infrastructure..."
            terraform apply -auto-approve tfplan
            
            echo "✅ Compliant infrastructure deployed successfully!"
            
            # Clean up to avoid AWS charges
            echo "Cleaning up resources..."
            terraform destroy -auto-approve
            echo "✅ Resources cleaned up"

workflows:
  security-pipeline:
    jobs:
      - policy-validation
      - deploy-compliant-infrastructure:
          requires:
            - policy-validation
